"""
Data Manager for the NN projet
- Deal with data files, matrix creation & co ...
"""

import random
import platform


def get_NumberOfPatients(PathToMatrixFile):
	"""
	-> Count number of patient in
	matrix file from RD
	-> return an int 
	"""
	inputDataFile = open(PathToMatrixFile, "r")
	numberOfPatient = 0
	for line in inputDataFile:
		numberOfPatient +=1
	inputDataFile.close()

	return int(numberOfPatient)



def generate_TrainingAndValidationMatrix(PathToMatrixFile, sizeOfValidationSet):
	"""
	-> Generate the training matrix
	-> Generate the validation matrix
	-> return both matrix in a tuple
	"""
	X = []
	X_validation = []
	numberOfPatient = get_NumberOfPatients(PathToMatrixFile)
	inputDataFile = open(PathToMatrixFile, "r")
	cmpt = 0
	for line in inputDataFile:
		lineWithoutBackN = line.split("\n")
		lineWithoutBackN = lineWithoutBackN[0]
		lineInArray = lineWithoutBackN.split(";")
		vector = []
		for scalar in lineInArray:
			vector.append(int(scalar))

		if(cmpt < (numberOfPatient - sizeOfValidationSet)):
			X.append(vector)
		else:
			X_validation.append(vector)
		cmpt +=1
	inputDataFile.close()

	return(X, X_validation)


def generate_LabelsVectors(PathToMatrixLabelFile, binaryClassification, sizeOfValidationSet, numberOfPatient):
	"""
	-> Generate label vector for training data
	-> Generate label vector for validation data
	-> return both vectors in a tuple
	"""
	y = []
	y_validation = []
	inputLabelFile = open(PathToMatrixLabelFile, "r")
	cmpt = 0
	for line in inputLabelFile:
		lineWithoutBackN = line.split("\n")
		lineWithoutBackN = lineWithoutBackN[0]

		scalar = lineWithoutBackN

		if(binaryClassification):
			if(lineWithoutBackN != "control" and lineWithoutBackN != "Control"):
				scalar = "Malade"
			else:
				scalar = "Control"

		if(cmpt < (numberOfPatient - sizeOfValidationSet)):
			y.append(scalar)
		else:
			y_validation.append(scalar)
		cmpt += 1
	inputLabelFile.close()

	return (y, y_validation)



def reformat_inputFile(input_file_name, index_file_name):
	"""
	-> reformat an input file, the input file have to contain only 
	   binary values (0 or 1) except for the patient identifiant.
	-> patient identifiant is used to retrieve the patient patient diagnostic
	   using the index file patient
	-> input_file_name is the name of the input file (generated by the binaryzation
	   function from RD)
	-> index_file_name is the name of the patient index file
	"""

	matrix_file_name = "DATA/data_formated.csv"
	label_file_name = "DATA/data_formated_label.csv"

	input_file_data = open(input_file_name, "r")
	matrix_file = open(matrix_file_name, "w")
	label_file = open(label_file_name, "w")

	cmpt = 0
	for line in input_file_data:
		lineWithoutBackN = line.split("\n")
		lineWithoutBackN = lineWithoutBackN[0]
		lineInArray = lineWithoutBackN.split(";")

		patient_identifiant = "undef"
		patient_diagnostique = "undef"
		patient_vector = ""

		if(cmpt > 0):
			index = 0
			for scalar in lineInArray:
				if(scalar != "0" and scalar != "1"):
					patient_identifiant = scalar

					index_file = open(index_file_name, "r")

					for index_file_line in index_file:
						index_file_lineWithoutBackN = index_file_line.split("\n")
						index_file_lineWithoutBackN = index_file_lineWithoutBackN[0]
						index_file_line_array = index_file_lineWithoutBackN.split(";")

						index_identifiant = index_file_line_array[0]
						index_diagnostique = index_file_line_array[1]

						if(index_identifiant == patient_identifiant):
							patient_diagnostique = index_diagnostique
							
					index_file.close()


				else:
					patient_vector += scalar + ";"
				index += 1

			# Write in output files
			patient_vector = patient_vector[:-1]
			matrix_file.write(patient_vector+"\n")
			label_file.write(patient_diagnostique+"\n")


		cmpt += 1

	label_file.close()
	matrix_file.close()
	input_file_data.close()



def merge_input_files(input_file_1, input_file_2):
	"""
	-> merge file 1 and file 2, delete the OMICID column in file
	   2.
	-> create a new output file

	TODO:
		- generation of the output file name
	"""

	output_file_name = "DATA/data_merged.csv" 
	line_vector = []
	index_omicid = "undef"
	output_file = open(output_file_name, "w")

	input_data_1 = open(input_file_1, "r")
	cmpt_patient_1 = 0
	for line in input_data_1:
		line = line.split("\n")
		line = line[0]
		line_vector.append(line)
		cmpt_patient_1 += 1
	input_data_1.close()

	input_data_2 = open(input_file_2, "r")
	cmpt_patient_2 = 0
	for line in input_data_2:
		line = line.split("\n")
		line = line[0]
		line_array = line.split(";")

		if(cmpt_patient_2 == 0):
			cmpt_index = 0
			for scalar in line_array:
				if(scalar == "OMICID"):
					index_omicid = cmpt_index
				cmpt_index+= 1 

		line_to_add = ";"
		cmpt_index = 0
		for scalar in line_array:
			if(cmpt_index != index_omicid):
				line_to_add += str(scalar) + ";"
			cmpt_index += 1

		line_to_write = line_vector[cmpt_patient_2] + line_to_add[:-1]
		output_file.write(line_to_write+"\n")

		cmpt_patient_2 += 1
	input_data_2.close()

	output_file.close()



def cross_validation(PathToMatrixFile, PathToMatrixLabelFile, sizeOfValidationSet, binaryClassification):

	numberOfPatient = get_NumberOfPatients(PathToMatrixFile)
	numberOfSample = numberOfPatient / sizeOfValidationSet
	numberOfSample_reste = numberOfPatient % sizeOfValidationSet

	X_sets = []
	X_validation_sets = []
	y_sets = []
	y_validation_sets = []

	list_of_training_set = []
	for k in range(0, numberOfSample):
		index_of_train_vector = []
		for x in range(0, sizeOfValidationSet):
			index = random.randint(0, numberOfPatient)
			index_of_train_vector.append(index)
		
		list_of_training_set.append(index_of_train_vector)

		X = []
		X_validation = []

		inputDataFile = open(PathToMatrixFile, "r")
		cmpt = 0
		for line in inputDataFile:
			lineWithoutBackN = line.split("\n")
			lineWithoutBackN = lineWithoutBackN[0]
			lineInArray = lineWithoutBackN.split(";")
			vector = []
			for scalar in lineInArray:
				vector.append(int(scalar))
			if(cmpt not in index_of_train_vector):
				X.append(vector)
			else:
				X_validation.append(vector)
			cmpt +=1
		inputDataFile.close()

		X_sets.append(X)
		X_validation_sets.append(X_validation)


		y = []
		y_validation = []
		inputLabelFile = open(PathToMatrixLabelFile, "r")
		cmpt = 0
		for line in inputLabelFile:
			lineWithoutBackN = line.split("\n")
			lineWithoutBackN = lineWithoutBackN[0]

			scalar = lineWithoutBackN

			if(binaryClassification):
				if(lineWithoutBackN != "control" and lineWithoutBackN != "Control"):
					scalar = "Malade"
				else:
					scalar = "Control"

			if(cmpt not in index_of_train_vector):
				y.append(scalar)
			else:
				y_validation.append(scalar)
			cmpt += 1
		inputLabelFile.close()

		y_sets.append(y)
		y_validation_sets.append(y_validation)



	
	return (X_sets, X_validation_sets, y_sets, y_validation_sets)



def filter_input_data(input_file_name, index_file_name, method):
	"""
	-> filter input data, to use before reformat input.
	-> reorder proportion of control/patient in cohorte
	-> two type of filter:
		- type 1 : (method = random)
		- type 2 : (method = disease, could be SLE, SjS ...)
	"""


	# => Get Data 

	id_to_vector = {}
	id_to_diag = {}

	if(platform.system() == "Windows"):
		matrix_file_name = "..\\RD\\sample\\DATA\\MATRIX\\data_dichotomized_pattern_individual_to_evaluate_filtered.csv"
	elif(platform.system() == "Linux"):
		matrix_file_name = "../RD/sample/DATA/MATRIX/data_dichotomized_pattern_individual_to_evaluate_filtered.csv"

	matrix_file = open(matrix_file_name, "w")
	input_file_data = open(input_file_name, "r")
	
	cmpt = 0
	for line in input_file_data:
		lineWithoutBackN = line.split("\n")
		lineWithoutBackN = lineWithoutBackN[0]
		lineInArray = lineWithoutBackN.split(";")

		patient_identifiant = "undef"
		patient_diagnostique = "undef"
		patient_vector = ""

		if(cmpt == 0):
			matrix_file.write(line)

		if(cmpt > 0):
			index = 0
			for scalar in lineInArray:
				if(scalar != "0" and scalar != "1"):
					patient_identifiant = scalar

					index_file = open(index_file_name, "r")

					for index_file_line in index_file:
						index_file_lineWithoutBackN = index_file_line.split("\n")
						index_file_lineWithoutBackN = index_file_lineWithoutBackN[0]
						index_file_line_array = index_file_lineWithoutBackN.split(";")

						index_identifiant = index_file_line_array[0]
						index_diagnostique = index_file_line_array[1]

						if(index_identifiant == patient_identifiant):
							patient_diagnostique = index_diagnostique
							
					index_file.close()
				
				patient_vector += scalar + ";"
				
				index += 1

			patient_vector = patient_vector[:-1]
			id_to_vector[patient_identifiant] = patient_vector
			id_to_diag[patient_identifiant] = patient_diagnostique

		cmpt += 1

	
	input_file_data.close()
	matrix_file.close()


	if(method == "random"):

		#----------------------------------------------------------#
		# Type 1 filter : get all the controls and the same number #
		# of patients                  							   #
		#----------------------------------------------------------#

		# Filter data
		controls_id = []
		for patient_id in id_to_diag.keys():
			if(id_to_diag[patient_id] == "Control"):
				controls_id.append(patient_id)

		patient_ids = []
		for patient_id in id_to_diag.keys():
			if(patient_id not in controls_id and len(patient_ids) < len(controls_id)):
				patient_ids.append(patient_id)

		# write results
		matrix_file = open(matrix_file_name, "a")

		for patient_id in controls_id:
			line_to_write = id_to_vector[patient_id]
			matrix_file.write(line_to_write+"\n")

		for patient_id in patient_ids:
			line_to_write = id_to_vector[patient_id]
			matrix_file.write(line_to_write+"\n")

		matrix_file.close()

	else:

		#-------------------------------------------------------------#
		# Type 2 filter : get all the patients for a specific disease #
		# and the same number of control                  			  #
		#-------------------------------------------------------------#

		# Filter data
		disease = method
		disease_ids = []
		for patient_id in id_to_diag.keys():
			if(id_to_diag[patient_id] == disease):
				disease_ids.append(patient_id)

		control_ids = []
		for patient_id in id_to_diag.keys():
			if(id_to_diag[patient_id] == "Control" and len(disease_ids) > len(control_ids)):
				control_ids.append(patient_id)


		# write results
		matrix_file = open(matrix_file_name, "a")

		for patient_id in control_ids:
			line_to_write = id_to_vector[patient_id]
			matrix_file.write(line_to_write+"\n")

		for patient_id in disease_ids:
			line_to_write = id_to_vector[patient_id]
			matrix_file.write(line_to_write+"\n")

		matrix_file.close()
